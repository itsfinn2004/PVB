//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FistFury.Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""60cf94e6-7eed-4792-b399-2a645ac5e9a3"",
            ""actions"": [
                {
                    ""name"": ""horizontal move"",
                    ""type"": ""Value"",
                    ""id"": ""97697281-924e-47e4-92ff-480d204cb788"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""vertical move"",
                    ""type"": ""Value"",
                    ""id"": ""565cc778-e4fd-41f7-8e02-b0b40289b40f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.9)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""duck"",
                    ""type"": ""Button"",
                    ""id"": ""62283047-afa3-4390-86d0-012a3358eb66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8765c13-3ce7-4720-9b1e-b4cb4d9f9dd2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2dc9a38-33fc-4a0a-bdc2-eb200d054bba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""98a22ef9-ba2a-4382-bbb5-4e85c66f3b80"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""95121fa4-253b-4c83-ba6e-54e30132ffcb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e9b6d0fa-112b-4fbc-836a-280c004f9ad0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b74a2aa-82f4-4a0d-909a-fdef9fe6c229"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""475cd968-92c7-496c-ab1a-7669f2930a0c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""347e612e-a1aa-42c7-9fb2-04f8a3ed7c04"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2eaad517-2b39-4832-99f5-1621cea19141"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""220024d6-0a07-47f8-83ff-b678a196f726"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Player1Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""16756019-19b8-4be5-9d98-c59847815ea9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""vertical move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a14eb5a3-6734-4f67-9f3e-4ab4417cfc20"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Player1Scheme"",
                    ""action"": ""vertical move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3f6901d-989a-43e6-8aa2-d879c05c1d2d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8062bda8-0a78-446b-9993-a1ce527fe000"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1Scheme"",
                    ""action"": ""duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""c7f89b6e-08db-4387-b9d0-96661dfecfe3"",
            ""actions"": [
                {
                    ""name"": ""horizontal move"",
                    ""type"": ""Value"",
                    ""id"": ""56c9151e-e17f-499f-966d-ad89d08f6835"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""vertical move"",
                    ""type"": ""Value"",
                    ""id"": ""6c255147-97e3-4567-9c1a-5de326fe7216"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.9)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""duck"",
                    ""type"": ""Button"",
                    ""id"": ""32d9b8bc-2cd8-4fa7-9482-887c225d32ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a700f0f-c1cd-4382-8786-e2e043c23ca8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f80fd58f-1a80-48c6-9c9e-86e43e3b20e1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5875728b-a6f7-4373-9c6d-10b7e063ffe0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""16d2e5cf-4362-4d9b-b7bc-3d3a1355f9de"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38261822-cac6-4025-9278-0981235a7e59"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f7975cd0-6519-4560-97d7-1db751ad3fdf"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme;Controller"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30e4061a-1aa2-471a-97a5-e54bf02a467e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme;Controller"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""407a9dfd-b588-4a02-9deb-5479d2dba493"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b85e074e-cd53-4d5a-9c71-3cb781f37dc6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme;Controller"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d498a83-09c3-4cee-8a3c-36ce71de7f9c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme;Controller"",
                    ""action"": ""horizontal move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d6d20583-bf23-4e70-9623-5b3451ca47b2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""vertical move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f26c4f-6b89-4bcb-b6d6-efd2f438b147"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""vertical move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f224005-0926-4b20-a262-b324ef45b39f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e2b53b9-d1be-4d71-93cc-fd7d848b356b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2Scheme"",
                    ""action"": ""duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player1Scheme"",
            ""bindingGroup"": ""Player1Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Player2Scheme"",
            ""bindingGroup"": ""Player2Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player1
            m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
            m_Player1_horizontalmove = m_Player1.FindAction("horizontal move", throwIfNotFound: true);
            m_Player1_verticalmove = m_Player1.FindAction("vertical move", throwIfNotFound: true);
            m_Player1_duck = m_Player1.FindAction("duck", throwIfNotFound: true);
            // Player2
            m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
            m_Player2_horizontalmove = m_Player2.FindAction("horizontal move", throwIfNotFound: true);
            m_Player2_verticalmove = m_Player2.FindAction("vertical move", throwIfNotFound: true);
            m_Player2_duck = m_Player2.FindAction("duck", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player1
        private readonly InputActionMap m_Player1;
        private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
        private readonly InputAction m_Player1_horizontalmove;
        private readonly InputAction m_Player1_verticalmove;
        private readonly InputAction m_Player1_duck;
        public struct Player1Actions
        {
            private @InputActions m_Wrapper;
            public Player1Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @horizontalmove => m_Wrapper.m_Player1_horizontalmove;
            public InputAction @verticalmove => m_Wrapper.m_Player1_verticalmove;
            public InputAction @duck => m_Wrapper.m_Player1_duck;
            public InputActionMap Get() { return m_Wrapper.m_Player1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer1Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
                @horizontalmove.started += instance.OnHorizontalmove;
                @horizontalmove.performed += instance.OnHorizontalmove;
                @horizontalmove.canceled += instance.OnHorizontalmove;
                @verticalmove.started += instance.OnVerticalmove;
                @verticalmove.performed += instance.OnVerticalmove;
                @verticalmove.canceled += instance.OnVerticalmove;
                @duck.started += instance.OnDuck;
                @duck.performed += instance.OnDuck;
                @duck.canceled += instance.OnDuck;
            }

            private void UnregisterCallbacks(IPlayer1Actions instance)
            {
                @horizontalmove.started -= instance.OnHorizontalmove;
                @horizontalmove.performed -= instance.OnHorizontalmove;
                @horizontalmove.canceled -= instance.OnHorizontalmove;
                @verticalmove.started -= instance.OnVerticalmove;
                @verticalmove.performed -= instance.OnVerticalmove;
                @verticalmove.canceled -= instance.OnVerticalmove;
                @duck.started -= instance.OnDuck;
                @duck.performed -= instance.OnDuck;
                @duck.canceled -= instance.OnDuck;
            }

            public void RemoveCallbacks(IPlayer1Actions instance)
            {
                if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer1Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player1Actions @Player1 => new Player1Actions(this);

        // Player2
        private readonly InputActionMap m_Player2;
        private List<IPlayer2Actions> m_Player2ActionsCallbackInterfaces = new List<IPlayer2Actions>();
        private readonly InputAction m_Player2_horizontalmove;
        private readonly InputAction m_Player2_verticalmove;
        private readonly InputAction m_Player2_duck;
        public struct Player2Actions
        {
            private @InputActions m_Wrapper;
            public Player2Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @horizontalmove => m_Wrapper.m_Player2_horizontalmove;
            public InputAction @verticalmove => m_Wrapper.m_Player2_verticalmove;
            public InputAction @duck => m_Wrapper.m_Player2_duck;
            public InputActionMap Get() { return m_Wrapper.m_Player2; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer2Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player2ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player2ActionsCallbackInterfaces.Add(instance);
                @horizontalmove.started += instance.OnHorizontalmove;
                @horizontalmove.performed += instance.OnHorizontalmove;
                @horizontalmove.canceled += instance.OnHorizontalmove;
                @verticalmove.started += instance.OnVerticalmove;
                @verticalmove.performed += instance.OnVerticalmove;
                @verticalmove.canceled += instance.OnVerticalmove;
                @duck.started += instance.OnDuck;
                @duck.performed += instance.OnDuck;
                @duck.canceled += instance.OnDuck;
            }

            private void UnregisterCallbacks(IPlayer2Actions instance)
            {
                @horizontalmove.started -= instance.OnHorizontalmove;
                @horizontalmove.performed -= instance.OnHorizontalmove;
                @horizontalmove.canceled -= instance.OnHorizontalmove;
                @verticalmove.started -= instance.OnVerticalmove;
                @verticalmove.performed -= instance.OnVerticalmove;
                @verticalmove.canceled -= instance.OnVerticalmove;
                @duck.started -= instance.OnDuck;
                @duck.performed -= instance.OnDuck;
                @duck.canceled -= instance.OnDuck;
            }

            public void RemoveCallbacks(IPlayer2Actions instance)
            {
                if (m_Wrapper.m_Player2ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer2Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player2ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player2ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player2Actions @Player2 => new Player2Actions(this);
        private int m_Player1SchemeSchemeIndex = -1;
        public InputControlScheme Player1SchemeScheme
        {
            get
            {
                if (m_Player1SchemeSchemeIndex == -1) m_Player1SchemeSchemeIndex = asset.FindControlSchemeIndex("Player1Scheme");
                return asset.controlSchemes[m_Player1SchemeSchemeIndex];
            }
        }
        private int m_ControllerSchemeIndex = -1;
        public InputControlScheme ControllerScheme
        {
            get
            {
                if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
                return asset.controlSchemes[m_ControllerSchemeIndex];
            }
        }
        private int m_Player2SchemeSchemeIndex = -1;
        public InputControlScheme Player2SchemeScheme
        {
            get
            {
                if (m_Player2SchemeSchemeIndex == -1) m_Player2SchemeSchemeIndex = asset.FindControlSchemeIndex("Player2Scheme");
                return asset.controlSchemes[m_Player2SchemeSchemeIndex];
            }
        }
        public interface IPlayer1Actions
        {
            void OnHorizontalmove(InputAction.CallbackContext context);
            void OnVerticalmove(InputAction.CallbackContext context);
            void OnDuck(InputAction.CallbackContext context);
        }
        public interface IPlayer2Actions
        {
            void OnHorizontalmove(InputAction.CallbackContext context);
            void OnVerticalmove(InputAction.CallbackContext context);
            void OnDuck(InputAction.CallbackContext context);
        }
    }
}
